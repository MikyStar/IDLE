import { Schema, Document, Model } from 'mongoose';
import { GraphQLObjectType } from 'graphql';

////////////////////////////////////////////////////////////////////////////

interface DBCollection
{
    findOne : ( attribute : JSON ) => Promise<User>, // TODO Make a less generic type ready for autocomplete
    create : () => Promise<Document>,
    remove : () => Promise<void>,
    edit : () => Promise<Document>
}

interface GraphQLQuerrable
{
    requests : GraphQLObjectType[],
}

export interface IUser
{
    email : string,
    passwordHash : string,
    money : number,
    productionBySecond : number,
    lastUpdate : Date,
    staff : string[],
    buildings : string[],
    slotsAvailable : number
}

//export type ServerData = DBCollection & GraphQLObjectType;

////////////////////////////////////////////////////////////////////////////

export class User implements ServerData
{
    private model : Document;


}

/*const UserScheme = new Schema(
{
    email : String,
    passwordHash : String,
    money : Number,
    production : Number,
	lastUpdate : { type: Date, default: Date.now }, 
    staff : [String],
    buildings : [String],
    slotsAvailable : Number
})

////////////////////////////////////////////////////////////////////////////

export default mongoose.model( 'User', UserScheme );*/